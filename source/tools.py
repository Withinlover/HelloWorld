import pygame, sys, random
from . import constants as C
from . import sound

class Game:
    def __init__(self, state_dict, state_start):
        self.screen = pygame.display.get_surface()
        self.clock = pygame.time.Clock()
        self.keys = pygame.key.get_pressed()
        self.state_dict = state_dict
        self.state = state_dict[state_start]
        self.sound = sound.Sound()

    # 状态更新系统，不断判断是否结束，并寻找下一个阶段
    def update(self):
        if self.state.finished:
            nextState = self.state.next
            self.state.finished = False
            self.state = self.state_dict[nextState]
        self.state.update(self.screen, self.keys)
        self.sound.update(self.keys)

    # 主控
    def run(self):
        while True:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.display.quit()
                    sys.exit()
                elif event.type == pygame.KEYDOWN:
                    self.keys = pygame.key.get_pressed()
                elif event.type == pygame.KEYUP:
                    self.keys = pygame.key.get_pressed()

            self.update()

            pygame.display.update()
            self.clock.tick(60)

# 判断， 蛇与自身
def SingleCheck(snack):
    status = snack.segment
    position = snack.position
    positionX, positionY = position
    for index in range(1, len(status)) :
        if (positionX, positionY) == status[index]:
            return True
    if C.mode[2] == 1:
        return False

    if positionX < 200 or positionX >= 800:
        return True
    if positionY < 0 or positionY >= 600:
        return True
    return False

# 判断， 蛇头与位置
def foodCheck(snack, position):
    if snack.position == position:
        return True
    return False

# 判断， 位置与蛇
def checkSnack(position, status):
     if position in status:
        return True
     return False

# 随机位置除了蛇身以外的位置
def randPosition(status1, status2):
    position = (random.randint(0, 29) * 20 + 200, random.randint(0, 29) * 20)
    while checkSnack(position, status1) or checkSnack(position, status2):
        position = (random.randint(0, 29) * 20 + 200, random.randint(0, 29) * 20)
    return position

# Map = [
# [   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30],
# [ 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 888, 887,  46,  45,  44,  43,  42,  41,  40,  39,  38,  37,  36,  35,  34,  33,  32,  31],
# [ 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62],
# [ 872, 871, 870, 869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859,  78,  77,  76,  75,  74,  73,  72,  71,  70,  69,  68,  67,  66,  65,  64,  63],
# [ 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94],
# [ 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832, 831, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100,  99,  98,  97,  96,  95],
# [ 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126],
# [ 816, 815, 814, 813, 812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 142, 141, 140, 139, 138, 137, 136, 135, 134, 133, 132, 131, 130, 129, 128, 127],
# [ 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158],
# [ 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 174, 173, 172, 171, 170, 169, 168, 167, 166, 165, 164, 163, 162, 161, 160, 159],
# [ 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190],
# [ 760, 759, 758, 757, 756, 755, 754, 753, 752, 751, 750, 749, 748, 747, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191],
# [ 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222],
# [ 732, 731, 730, 729, 728, 727, 726, 725, 724, 723, 722, 721, 720, 719, 238, 237, 236, 235, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 223],
# [ 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254],
# [ 704, 703, 702, 701, 700, 699, 698, 697, 696, 695, 694, 693, 692, 691, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 260, 259, 258, 257, 256, 255],
# [ 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286],
# [ 676, 675, 674, 673, 672, 671, 670, 669, 668, 667, 666, 665, 664, 663, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287],
# [ 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318],
# [ 648, 647, 646, 645, 644, 643, 642, 641, 640, 639, 638, 637, 636, 635, 334, 333, 332, 331, 330, 329, 328, 327, 326, 325, 324, 323, 322, 321, 320, 319],
# [ 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350],
# [ 620, 619, 618, 617, 616, 615, 614, 613, 612, 611, 610, 609, 608, 607, 366, 365, 364, 363, 362, 361, 360, 359, 358, 357, 356, 355, 354, 353, 352, 351],
# [ 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382],
# [ 592, 591, 590, 589, 588, 587, 586, 585, 584, 583, 582, 581, 580, 579, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383],
# [ 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414],
# [ 564, 563, 562, 561, 560, 559, 558, 557, 556, 555, 554, 553, 552, 551, 430, 429, 428, 427, 426, 425, 424, 423, 422, 421, 420, 419, 418, 417, 416, 415],
# [ 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446],
# [ 536, 535, 534, 533, 532, 531, 530, 529, 528, 527, 526, 525, 524, 523, 462, 461, 460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 448, 447],
# [ 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478],
# [ 508, 507, 506, 505, 504, 503, 502, 501, 500, 499, 498, 497, 496, 495, 494, 493, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 481, 480, 479]
# ]

Map = [
[   1,   2,   3,   4,   5,   6,   7,  54,  55,  56,  57,  58,  59, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 278, 279, 280, 281, 282, 283, 284],
[ 900, 899, 898, 897, 846, 845,   8,  53,  52,  51,  50,  49,  60, 229, 228, 227, 226, 225, 224, 223, 222, 221, 240, 277, 276, 275, 274, 273, 272, 285],
[ 887, 888, 889, 896, 847, 844,   9,  10,  11,  12,  13,  48,  61, 138, 139, 144, 145, 150, 151, 218, 219, 220, 241, 248, 249, 254, 255, 270, 271, 286],
[ 886, 891, 890, 895, 848, 843, 842, 841, 840, 839,  14,  47,  62, 137, 140, 143, 146, 149, 152, 217, 216, 243, 242, 247, 250, 253, 256, 269, 288, 287],
[ 885, 892, 893, 894, 849, 768, 769, 770, 771, 838,  15,  46,  63, 136, 141, 142, 147, 148, 153, 154, 215, 244, 245, 246, 251, 252, 257, 268, 289, 290],
[ 884, 883, 882, 881, 850, 767, 718, 717, 772, 837,  16,  45,  64, 135, 134, 133, 132, 131, 130, 155, 214, 213, 212, 211, 210, 259, 258, 267, 292, 291],
[ 877, 878, 879, 880, 851, 766, 719, 716, 773, 836,  17,  44,  65,  66,  67,  68,  69,  70, 129, 156, 161, 162, 163, 164, 209, 260, 265, 266, 293, 294],
[ 876, 875, 874, 873, 852, 765, 720, 715, 774, 835,  18,  43,  42,  41,  40,  39,  38,  71, 128, 157, 160, 121, 120, 165, 208, 261, 264, 201, 200, 295],
[ 863, 864, 865, 872, 853, 764, 721, 714, 775, 834,  19,  20,  21,  22,  23,  24,  37,  72, 127, 158, 159, 122, 119, 166, 207, 262, 263, 202, 199, 296],
[ 862, 867, 866, 871, 854, 763, 722, 713, 776, 833, 832, 831, 830, 829, 828,  25,  36,  73, 126, 125, 124, 123, 118, 167, 206, 205, 204, 203, 198, 297],
[ 861, 868, 869, 870, 855, 762, 723, 712, 777, 778, 823, 824, 825, 826, 827,  26,  35,  74, 113, 114, 115, 116, 117, 168, 193, 194, 195, 196, 197, 298],
[ 860, 859, 858, 857, 856, 761, 724, 711, 710, 779, 822, 821, 820, 467, 466,  27,  34,  75, 112, 109, 108, 105, 104, 169, 192, 191, 190, 189, 188, 299],
[ 747, 748, 757, 758, 759, 760, 725, 726, 709, 780, 811, 812, 819, 468, 465,  28,  33,  76, 111, 110, 107, 106, 103, 170, 183, 184, 185, 186, 187, 300],
[ 746, 749, 756, 735, 734, 731, 730, 727, 708, 781, 810, 813, 818, 469, 464,  29,  32,  77,  90,  91,  92,  93, 102, 171, 182, 181, 180, 179, 178, 301],
[ 745, 750, 755, 736, 733, 732, 729, 728, 707, 782, 809, 814, 817, 470, 463,  30,  31,  78,  89, 436, 435,  94, 101, 172, 173, 174, 175, 176, 177, 302],
[ 744, 751, 754, 737, 702, 703, 704, 705, 706, 783, 808, 815, 816, 471, 462,  81,  80,  79,  88, 437, 434,  95, 100, 425, 424, 417, 416, 415, 414, 303],
[ 743, 752, 753, 738, 701, 700, 665, 664, 785, 784, 807, 478, 477, 472, 461,  82,  85,  86,  87, 438, 433,  96,  99, 426, 423, 418, 389, 390, 413, 304],
[ 742, 741, 740, 739, 698, 699, 666, 663, 786, 805, 806, 479, 476, 473, 460,  83,  84, 443, 442, 439, 432,  97,  98, 427, 422, 419, 388, 391, 412, 305],
[ 681, 682, 683, 684, 697, 668, 667, 662, 787, 804, 481, 480, 475, 474, 459, 458, 445, 444, 441, 440, 431, 430, 429, 428, 421, 420, 387, 392, 411, 306],
[ 680, 689, 688, 685, 696, 669, 660, 661, 788, 803, 482, 453, 454, 455, 456, 457, 446, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 410, 307],
[ 679, 690, 687, 686, 695, 670, 659, 790, 789, 802, 483, 452, 451, 450, 449, 448, 447, 376, 375, 374, 373, 372, 371, 398, 397, 396, 395, 394, 409, 308],
[ 678, 691, 692, 693, 694, 671, 658, 791, 792, 801, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 370, 399, 404, 405, 406, 407, 408, 309],
[ 677, 676, 675, 674, 673, 672, 657, 794, 793, 800, 799, 584, 583, 582, 581, 580, 579, 578, 577, 576, 575, 496, 369, 400, 403, 314, 313, 312, 311, 310],
[ 626, 627, 652, 653, 654, 655, 656, 795, 796, 797, 798, 585, 566, 567, 568, 569, 570, 571, 572, 573, 574, 497, 368, 401, 402, 315, 330, 331, 332, 333],
[ 625, 628, 651, 648, 647, 644, 643, 642, 641, 640, 587, 586, 565, 546, 545, 544, 543, 542, 541, 540, 539, 498, 367, 318, 317, 316, 329, 352, 351, 334],
[ 624, 629, 650, 649, 646, 645, 636, 637, 638, 639, 588, 589, 564, 547, 532, 533, 534, 535, 536, 537, 538, 499, 366, 319, 326, 327, 328, 353, 350, 335],
[ 623, 630, 631, 632, 633, 634, 635, 598, 597, 594, 593, 590, 563, 548, 531, 524, 523, 522, 521, 520, 519, 500, 365, 320, 325, 356, 355, 354, 349, 336],
[ 622, 621, 620, 619, 608, 607, 606, 599, 596, 595, 592, 591, 562, 549, 530, 525, 514, 515, 516, 517, 518, 501, 364, 321, 324, 357, 346, 347, 348, 337],
[ 615, 616, 617, 618, 609, 604, 605, 600, 557, 558, 559, 560, 561, 550, 529, 526, 513, 510, 509, 506, 505, 502, 363, 322, 323, 358, 345, 342, 341, 338],
[ 614, 613, 612, 611, 610, 603, 602, 601, 556, 555, 554, 553, 552, 551, 528, 527, 512, 511, 508, 507, 504, 503, 362, 361, 360, 359, 344, 343, 340, 339]
]

def positionCheck(head, tail, Food):
    if head > tail and ((Food > head and Food <= 900) or (Food < tail and Food >= 1)):
        return ((Food - head - 1 + 900) % 900) + 1
    if head < tail and head < Food and Food < tail:
        return Food - head
    return 900

def getID(head, index):
    return ((Map[index[1]][index[0]] - Map[head[1]][head[0]] - 1) % 900) + 1

def transXY(old):
    x, y = old
    x = int((x - 200) / 20)
    y = int(y / 20)
    new = x, y
    return new

def reTrans(new):
    x, y = new
    x = x * 20 + 200
    y = y * 20
    old = x, y
    return old

def defalutMove(snack, head, wall):
    x, y = head
    if x > 0 and Map[y][x - 1] - 1 == Map[y][x] % 900:
        if not getID(head, (x - 1, y)) in wall:
            snack.preButton = 'left'
            return
    if x < 29 and Map[y][x + 1] - 1 == Map[y][x] % 900:
        if not getID(head, (x + 1, y)) in wall:
            snack.preButton = 'right'
            return
    if y > 0 and Map[y - 1][x] - 1 == Map[y][x] % 900:
        if not getID(head, (x, y - 1)) in wall:
            snack.preButton = 'up'
            return
    if y < 29 and Map[y + 1][x] - 1 == Map[y][x] % 900:
        if not getID(head, (x, y + 1)) in wall:
            snack.preButton = 'down'
            return


    # break the low
    if y > 0 and snack.direction != 'down':
        if not getID(head, (x, y - 1)) in wall:
            snack.preButton = 'up'
            return
    if y < 29 and snack.direction != 'up':
        if not getID(head, (x, y + 1)) in wall:
            snack.preButton = 'down'
            return
    if x > 0 and snack.direction != 'right':
        if not getID(head, (x - 1, y)) in wall:
            snack.preButton = 'left'
            return
    if x < 29 and snack.direction != 'left':
        if not getID(head, (x + 1, y)) in wall:
            snack.preButton = 'right'
            return



def getPreButton(snack, Food, segement = []):
    head = transXY(snack.position)
    tail = transXY(snack.segment[len(snack.segment) - 1])
    wall = [0 for i in range(len(segement))]
    for index in range(len(segement)):
        wall[index] = getID(head, transXY(segement[index]))

    if Food.existGift:
        food = transXY(Food.gift)
    else:
        food = transXY(Food.position)

    Min = 900
    snack.preButton = 'error'
    # print(head, getID(head, food), getID(head, tail))
    if getID(head, food) < getID(head, tail):
        x, y = head
        lim = getID(head, food)
        if x > 0:
            new = getID(head, (x - 1, y))
            if new <= lim and Min > lim - new and not new in wall:
                Min = lim - new
                snack.preButton = 'left'
        if x < 29:
            new = getID(head, (x + 1, y))
            if new <= lim and Min > lim - new and not new in wall:
                Min = lim - new
                snack.preButton = 'right'
        if y > 0:
            new = getID(head, (x, y - 1))
            if new <= lim and Min > lim - new and not new in wall:
                Min = lim - new
                snack.preButton = 'up'
        if y < 29:
            new = getID(head, (x, y + 1))
            if new <= lim and Min > lim - new and not new in wall:
                Min = lim - new
                snack.preButton = 'down'
    if snack.preButton == 'error':
        defalutMove(snack, head, wall)

def getSaveInfo():
    str = ''
    str += C.ModeInfo[1][C.mode[1]]
    str += C.ModeInfo[2][C.mode[2]]
    str += C.ModeInfo[3][C.mode[3]]
    return str
